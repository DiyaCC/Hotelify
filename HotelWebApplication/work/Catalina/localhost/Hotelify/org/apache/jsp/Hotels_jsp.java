/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.39
 * Generated at: 2025-03-26 19:01:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Hotels_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Allhotels</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"assets/css/styles.css\">\r\n");
      out.write("    <link href='https://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet'>\r\n");
      out.write("    <script>\r\n");
      out.write("        function backToRooms(hotel_id){\r\n");
      out.write("\r\n");
      out.write("            var checkin = document.getElementById(\"checkin\").value || '0000-00-00'\r\n");
      out.write("            var checkout = document.getElementById(\"checkout\").value || '0000-00-00'\r\n");
      out.write("\r\n");
      out.write("            var rooms=0\r\n");
      out.write("\r\n");
      out.write("            fetch(`${window.location.origin}");
      out.print( request.getContextPath() );
      out.write("/hotelID?hotel_id=${hotel_id}`).then(response => response.text()).then(data => {\r\n");
      out.write("                console.log(encodeURIComponent(data.trim()))\r\n");
      out.write("                var url = `room.jsp?hotel_id=${encodeURIComponent(hotel_id)}&hotel_name=${encodeURIComponent(data.trim())}&checkin=${encodeURIComponent(checkin)}&checkout=${encodeURIComponent(checkout)}&rooms=${encodeURIComponent(rooms)}`\r\n");
      out.write("                window.location.href = url\r\n");
      out.write("            })\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("        function fetchAllHotels(){\r\n");
      out.write("            var url = window.location.origin + \"/HotelWebApplication/allHotels\";\r\n");
      out.write("            fetch(url).then(response => response.text()).then(data=>{\r\n");
      out.write("              document.getElementById(\"results\").innerHTML=data\r\n");
      out.write("            }).catch(error => console.error(\"Error finding rooms:\", error))\r\n");
      out.write("        }\r\n");
      out.write("        window.onload = fetchAllHotels;\r\n");
      out.write("\r\n");
      out.write("        function applyFilters(){\r\n");
      out.write("            var destination = document.getElementById(\"destination\").value\r\n");
      out.write("            var chain = document.getElementById(\"chain\").value\r\n");
      out.write("            var checkin = document.getElementById(\"checkin\").value\r\n");
      out.write("            var checkout = document.getElementById(\"checkout\").value\r\n");
      out.write("            var min = document.getElementById(\"minprice\").value\r\n");
      out.write("            var max = document.getElementById(\"maxprice\").value\r\n");
      out.write("            var rooms = document.getElementById(\"hotelcapacity\").value\r\n");
      out.write("            var capacity = document.getElementById(\"roomcapacity\").value\r\n");
      out.write("            var star = document.getElementById(\"stars\").value\r\n");
      out.write("            var url = `${window.location.origin}");
      out.print( request.getContextPath() );
      out.write("/allFilters?city=${destination}&hotelChain=${chain}&checkin=${checkin}&checkout=${checkout}&minprice=${min}&maxprice=${max}&totalHotelRooms=${rooms}&roomSize=${capacity}&stars=${star}`\r\n");
      out.write("            fetch(url).then(response => response.text()).then(data => {\r\n");
      out.write("                document.getElementById(\"results\").innerHTML=data;\r\n");
      out.write("            }).catch(error => console.error(\"Error finding rooms:\", error))\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"navBar\">\r\n");
      out.write("        <h3>HOTELIFY</h3>\r\n");
      out.write("        <div class=\"links row\">\r\n");
      out.write("            <a href=\"index.jsp\" class=\"link\">Home</a>\r\n");
      out.write("            <br>\r\n");
      out.write("            <a href=\"employee.jsp\" class=\"link\">Employee Page</a>\r\n");
      out.write("            <br>\r\n");
      out.write("            <a href=\"EnterSSN.jsp\" class=\"link\">Book a Room</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"row content\">\r\n");
      out.write("        <div class=\"col filters\">\r\n");
      out.write("            <label for=\"destination\">Area</label>\r\n");
      out.write("            <input type=\"text\" id=\"destination\" placeholder=\"New York\"/>\r\n");
      out.write("            <label for=\"chain\">Hotel Chain</label>\r\n");
      out.write("            <input type=\"text\" id=\"chain\" placeholder=\"Marriot\"/>\r\n");
      out.write("            <div class=\"row\">\r\n");
      out.write("                <div class=\"col\">\r\n");
      out.write("                    <label for=\"checkin\">Check in</label>\r\n");
      out.write("                    <input type=\"date\" id=\"checkin\"/>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col\">\r\n");
      out.write("                    <label for=\"checkout\">Check out</label>\r\n");
      out.write("                    <input type=\"date\" id=\"checkout\"/>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"row\">\r\n");
      out.write("                <div class=\"col\">\r\n");
      out.write("                    <label for=\"minprice\">Minimum Price</label>\r\n");
      out.write("                    <input type=\"number\" id=\"minprice\" placeholder=\"100\">\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"col\">\r\n");
      out.write("                    <label for=\"maxprice\">Maximum Price</label>\r\n");
      out.write("                    <input type=\"number\" id=\"maxprice\" placeholder=\"500\">\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <label for=\"hotelcapacity\" >Total hotel rooms</label>\r\n");
      out.write("            <input id=\"hotelcapacity\" placeholder=\"5\" type=\"number\">\r\n");
      out.write("            <label for=\"roomcapacity\">Room size</label>\r\n");
      out.write("            <input id=\"roomcapacity\" type=\"number\" placeholder=\"2\">\r\n");
      out.write("            <label for=\"stars\">Stars</label>\r\n");
      out.write("            <input id=\"stars\" type=\"number\" min=\"1\" max=\"5\" placeholder=\"5\">\r\n");
      out.write("            <button class=\"buttons\" onclick=\"applyFilters()\">Apply Filters</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"col resultsAllHotels\" id=\"results\">\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
